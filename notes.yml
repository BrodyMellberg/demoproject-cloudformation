####    USER DETAILS    ####
user:
    accountId: 343850139185
    
    region:
        default: us-east-2
        avZone1: us-east-2a
        avZone2: us-east-2b
        avZone3: us-east-2c #NOTE; there may only be two. Delete third subnet if necessary

####    CLUSTER    ####
DemoProjectCluster:
    Type: AWS::ECS::Cluster
    Properties: 
        ClusterName: demoproject-cluster
#		ClusterSettings: 
#			name: containerInsights
#			value: enabled 
# containerInsights is the only setting that can be specified here
# it is not necessary for this pipeline

	
####    VPC     ####
DemoProjectVPC:
    Type: AWS::EC2::VPC
    Properties: 
        CidrBlock: 10.0.0.0/16
    #    EnableDnsHostnames: Boolean
    #    EnableDnsSupport: Boolean
        InstanceTenancy: default
    # the ID of this VPC can be accessed with ref: DemoProjectVPC

####    SUBNETS    ####
DemoProjectSub1:
    Type: AWS::EC2::Subnet
    Properties: 
    #    AssignIpv6AddressOnCreation: Boolean
        AvailabilityZone: user.region.avZone1
        CidrBlock: 10.0.0.0/20
    #    Ipv6CidrBlock: String
        MapPublicIpOnLaunch: true
        VpcId: Ref:DemoProjectVPC #maybe it should be !Ref?

DemoProjectSub2:
    Type: AWS::EC2::Subnet
    Properties:
        AvailabilityZone: user.region.avZone2
        CidrBlock: 10.0.16.0/20
        MapPublicIpOnLaunch: true
        VpcId: Ref:DemoProjectVPC

DemoProjectSub3:
    Type: AWS::EC2::Subnet
    Properties: 
        AvailabilityZone: user.region.avZone3
        CidrBlock: 10.0.32.0/20
        MapPublicIpOnLaunch: true
        VpcId: Ref:DemoProjectVPC

####    SECURITY GROUP    ####	

# "Your VPC automatically comes with a default security group. 
# If you don't specify a different security group when you launch
# the instance, we associate the default security group with your 
# instance.

DemoProjectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
        GroupDescription: "Pipeline for demoproject pipeline using CloudFormation"
        GroupName: demoproject-securitygroup
    #    SecurityGroupEgress: 
    #        - Egress  # ?????
    #    SecurityGroupIngress: 
    #        - Ingress # ?????
        VpcId: Ref: DemoProjectVPC

/// Load Balancer Target Group ///
# ??

####    SERVICE ROLES    ####
# attempt to create all necessary service roles here
# we might need a much more involved set of IAM settings

# CodeBuild
# CodeDeploy   
    attach AWSCodeDeployRoleForECS policy
    https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html
DemoProjectCodeDeployRole:
    Type: AWS::IAM::Role
    Properties: 
        AssumeRolePolicyDocument: Json !!!!!!!!!!!!!!
        Description: CodeDeploy Role 
        ManagedPolicyArns: 
            - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
        MaxSessionDuration: Integer
        Path: String
        PermissionsBoundary: String
        Policies: 
            - Policy
        RoleName: String



# ECS
# Load Balancing
# Pipeline
# ecsTaskExecutionRole


/// CodeDeploy service role ///

/// CodePipeline service role ///

####    ECR Repo    ####
DemoProjectECR:
    Type: AWS::ECR::Repository
    Properties: 
    #    LifecyclePolicy: 
    #        LifecyclePolicy
        RepositoryName: demoproject-repo
    #    RepositoryPolicyText: Json

####    S3 BUCKET    ####
# look at the docs if something's missing
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
DemoProjectBucket:
    Type: AWS::S3::Bucket
    Properties: 
        BucketName: demoproject-bucket

/// CodeCommit Repo ///

/// Container ///

####    CONTAINER DEFINITION    ####
# I am not sure if this is different to a standard container declaration
# identical to imagedefinition.json
DemoProjectContainerDefinition:
    name: demoproject-container
    image: repository-url/image:tag
    # (user.accountId).dkr.ecr.(user.region.default).amazonaws.com/(name):(tag)
    # there has GOT to be a way to concatenate this into one string using the input from other variables 

    # need to BUILD FIRST and PUSH TO ECR
    # although creating the image won't change the ECR URL...

####    TASK DEFINITION    ####
DemoProjectTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties: 
        ContainerDefinitions: 
            - DemoProjectContainerDefinition
        Cpu: 256
#        ExecutionRoleArn: String # FROM MEMORY I don't think it's needed
#        Family: String
#        InferenceAccelerators: 
#            - InferenceAccelerator
#        IpcMode: String
        Memory: 512
        NetworkMode: awsvpc # must be awsvpc when using Fargate
# A NetworkConfiguration must be defined in service 
#        PidMode: String
#        PlacementConstraints: 
#            - TaskDefinitionPlacementConstraint # NOT valid with Fargate
#        ProxyConfiguration: 
#            ProxyConfiguration
        RequiresCompatibilities: 
            - FARGATE
        TaskRoleArn: String # something about Amazon ECS task role
#        Volumes: 
#            - Volume


####    LOAD BALANCER    ####
DemoProjectLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
        IpAddressType: ipv4
    #    LoadBalancerAttributes:     
    #        - LoadBalancerAttribute
        Name: demoproject-loadbalancer
        Scheme: internet-facing # allows public IP access
        SecurityGroups: 
            - Ref: DemoProjectSecurityGroup
    #    SubnetMappings: 
    #        - SubnetMapping # "you must specify 
    #                           either subnets or subnet mappings"
        Subnets: 
            - Ref: DemoProjectSub1
            - Ref: DemoProjectSub2
            - Ref: DemoProjectSub3
        Type: application # different to the previous "Type"


####    TARGET GROUP    ####



####    SERIVCE    ####
DemoProjectService:
    Type: AWS::ECS::Service
    Properties:
        Cluster: DemoProjectCluster #or is it demoproject-cloudformation?
#        DeploymentConfiguration: might be needed
        DeploymentController:
            Type: CODE_DEPLOY
        DesiredCount: 1
#        EnableECSManagedTags: Boolean
#        HealthCheckGracePeriodSeconds: Integer
        LaunchType: FARGATE
        LoadBalancers:
            - DemoProjectLoadBalancer
        NetworkConfiguration:
            AwsvpcConfiguration: 
                AssignPublicIp: DISABLED
                SecurityGroups:
                    - Ref: DemoProjectSecurityGroup # default VPC security group used if not specified
                Subnets:
                    - Ref: DemoProjectSub1
                    - Ref: DemoProjectSub2
                    - Ref: DemoProjectSub3 
#        PlacementConstraints:
#            - PlacementConstraint
#        PlacementStrategies:
#            - PlacementStrategy
        PlatformVersion: LATEST
#        PropagateTags: String
        Role: String # This parameter is only permitted if you are using a load balancer with your service AND your task definition does not use the awsvpc network mode
                     # my task definitions use awsvpc by default, so what do?
#        SchedulingStrategy: String
        ServiceName: demoproject-service
#        ServiceRegistries: 
#          - ServiceRegistry
        TaskDefinition: family:revision  # how to ensure it uses most recent revision?
                                         # this syntax seems wrong

####    CODECOMMIT REPO    ####
DemoProjectCodeCommit:
    Type: AWS::CodeCommit::Repository
    Properties: 
#        Code: 
#            Code # hopefully shouldn't need it 
        RepositoryDescription: codecommit repo for demoproject
        RepositoryName: demoproject-codecommit
        Triggers: 
            - RepositoryTrigger
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

####    CODEBUILD PROJECT    ####
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html
DemoProjectBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
        Artifacts: 
            Type: CODEPIPELINE
            # there are other parameters, but they're either
            # irrelevant or ignored due to the type being CODEPIPELINE
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-artifacts.html
    #    BadgeEnabled: Boolean
    #    Cache: 
    #       ProjectCache # Could be useful for a more advanced user
        Description: "Build project according to buildspec.yml"
    #    EncryptionKey: String
        Environment: 
    #        Certificate: String
            ComputeType: BUILD_GENERAL1_SMALL
            EnvironmentVariables: 
                -
                    Name: AWS_DEFAULT_REGION # buildspec stuff
                    Type: PLAINTEXT
                    Value: "us-east-2"
                -
                    Name: AWS_ACCOUNT_ID
                    Type:PLAINTEXT
                    Value: "343850139185" #subject to change of course
                -
                    Name: IMAGE_TAG
                    Type: PLAINTEXT
                    Value: latest
                -
                    Name: IMAGE_REPO_NAME
                    Type: PLAINTEXT
                    Value: demoproject-repo # SOFT CODE THIS PLS
                #Is this syntax correct?
            Image: "aws/codebuild/standard:2.0" # same as first pipeline
            ImagePullCredentialsType: CODEBUILD
            PrivilegedMode: true
    #        RegistryCredential: 
    #            RegistryCredential # hopefully shouldn't need
            Type: ARM_CONTAINER
    #    LogsConfig: 
    #        LogsConfig
        Name: demoproject-build
    #    QueuedTimeoutInMinutes: Integer
    #    SecondaryArtifacts: 
    #        - Artifacts
    #    SecondarySources:            this stuff is for multiple input/output
    #       - Source
    #    SecondarySourceVersions: 
    #        - ProjectSourceVersion
        ServiceRole: String
        Source: 
    #        Auth: 
    #            SourceAuth
            BuildSpec:# the default should suffice. Not sure if should comment whole line 
            GitCloneDepth: 1
    #        GitSubmodulesConfig: 
    #            GitSubmodulesConfig
    #        InsecureSsl: Boolean
    #        Location: String # This will be specified in CodePipeline...
    #    but
    #   didn't we need the docker image built first so the task definition can be made
            ReportBuildStatus: false
    #        SourceIdentifier: String
            Type: CODECOMMIT
        SourceVersion: String # CODECOMMIT BRANCH   
    #    TimeoutInMinutes: Integer
    #    Triggers: 
    #        ProjectTriggers
        VpcConfig: 
            SecurityGroupIds: 
                - Ref: DemoProjectSecurityGroup
            Subnets: 
                - Ref: DemoProjectSub1
                - Ref: DemoProjectSub2
                - Ref: DemoProjectSub3 
            VpcId: Ref: DemoProjectVPC

####    CODEDEPLOY    ####
# application, config, deployment group
DemoProjectCodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties: 
        ApplicationName: demoproject-codedeployapp
        ComputePlatform: ECS

#DemoProjectCodeDeployConfig:
#    Type: AWS::CodeDeploy::DeploymentConfig
#    Properties: 
#        DeploymentConfigName: String # I'll take the default
#        MinimumHealthyHosts: 
#        MinimumHealthyHosts
# can I just NOT have this 

DemoProjectDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
#        AlarmConfiguration: 
#            AlarmConfiguration
        ApplicationName: Ref: DemoProjectCodeDeployApp
        AutoRollbackConfiguration: 
            AutoRollbackConfiguration
#        AutoScalingGroups: 
#            - String
#        Deployment: 
#            Deployment
#        DeploymentConfigName: String
        DeploymentGroupName: demoproject-codedeploygroup
        DeploymentStyle: 
            DeploymentStyle !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            DeploymentStyle:
                DeploymentOption: WITH_TRAFFIC_CONTROL
#        
#        Ec2TagFilters: 
#           - EC2TagFilter
#        Ec2TagSet: 
#            EC2TagSet
        LoadBalancerInfo: 
            TargetGroupInfoList:
                Name: # depends on BG/IP
#        OnPremisesInstanceTagFilters: 
#            - TagFilter
#        OnPremisesTagSet: 
#            OnPremisesTagSet
        ServiceRoleArn: String !!!!!!!!!!!!!!!!!!
        TriggerConfigurations: 
           - TriggerConfig




