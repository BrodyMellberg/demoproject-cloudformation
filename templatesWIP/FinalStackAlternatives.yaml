# Author: Brody Mellberg
# Last Modified: 06/02/20
# 
# This file contains basic templates for alternate source and
# deploy actions. I did not have time to implement this code 
# properly and so they do not work. However, the overall 
# structure and requirements of these templates is accurate

# CODECOMMIT Source Stage for Pipeline
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: ${AWS::StackName}-sourceartif
              Configuration:
                RepositoryName: String
                BranchName: String
                PollForSourceChanges: false
              RunOrder: 1            
              

####    CODEDEPLOY    ####
DemoProjectCodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties: 
        ApplicationName: demoproject-codedeployapp
        ComputePlatform: ECS

# Problems:
# When I try to run this, AWS throws an error saying "LoadBalancerInfo 
# cannot be defined". When I comment it out, it says "LoadBalancerInfo must
# be defined".

DemoProjectDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: DemoProjectCodeDeployApp
    Properties: 
        ApplicationName: !Ref DemoProjectCodeDeployApp
        Deployment:
            Description: String
                #IgnoreApplicationStopFailures: Boolean
                Revision: 
                    RevisionType: S3
                    S3Location: 
                        Bucket: DemoProjectS3Bucket
                        Key: buildartifact 
        DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
        DeploymentGroupName: demoproject-codedeploygroup
        DeploymentStyle:
            DeploymentOption: WITH_TRAFFIC_CONTROL
            DeploymentType: BLUE_GREEN
        LoadBalancerInfo: 
            ElbInfoList:
                Name: DemoProjectLoadBalancer 
            TargetGroupInfoList:
                Name: DemoProjectTargetGroup
        ServiceRoleArn: Fn::GetAtt:[CodeDeployServiceRole, Arn]

# Most online resources explain methods of performing CodeDeploy actions
# separately, using the AWS console. Doing this appears to be much easier
# than attempting to do it through CloudFormation. Some sources suspect
# a lack of support for CloudFormation. 
CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                Effect: Allow
                Principal:
                    Service: codedeploy.amazonaws.com
                Action: sts:AssumeRole
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AdministratorAccess
        
        # PIPELINE ACTION 
        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
                - Name: ${AWS::StackName}-buildartif
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeployToECS
              Configuration:
                ApplicationName: !Ref DemoProjectCodeDeployApp
                DeploymentGroupName: !Ref DemoProjectDeploymentGroup 
                TaskDefinitionTemplateArtifact: SourceArtifact
                AppSpecTemplateArtifact: SourceArtifact
                AppSpecTemplatePath: appspec.yaml                
              RunOrder: 1 
        
        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
                - Name: ${AWS::StackName}-buildartif
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref DemoProjectCodeDeployApp
                DeploymentGroupName: !Ref DemoProjectDeploymentGroup           
              RunOrder: 1               
