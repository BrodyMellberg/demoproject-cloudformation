# Final Stack with all resources being created in a single file
# it is a better practise to separate components into different 
# stacks and import them, but I am not doing this due to time 
# constraints

# VPC, Load Balancer, Subnet code provided by Sudhakar Vuppalapati
# PREREQUISITES
# Have a docker image in the ECR repo with the tag 'latest'
# Update the project buildspec or stack build commands to 
# make CodeBuild push new images to this repo with this tag

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  # SERVICE PARAMETERS
  DemoProjectSubnet1:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Please select 1st private subnet for your Service
  DemoProjectVPC:
    Type: AWS::EC2::VPC::Id
    Description: Please select the vpc for your TargetGroup (default VPC recommended)
  
  ECRRepoName:
    Description: Name of the ECR Repo
    Type: String
  
  GitHubOwner:
    Type: String
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubOAuth:
    Type: String
  
  # alt set of CodeCommit parameters
  
Resources:
  DemoProjectTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /opc/v1/ping
      HealthCheckPort: 8089
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub ${AWS::StackName}-targetgroup
      Port: 8089
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: DemoProjectTargetGroup-tag
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !Ref DemoProjectVPC

  DemoProjectLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-loadbalancer
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref POCContainerSecurityGroup
      Subnets: !Ref DemoProjectSubnet1
      Tags:
        - Key: Name
          Value: DemoProjectLoadBalancer-tag
      Type: application

  DemoProjectLBListener:
    DependsOn: DemoProjectLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DemoProjectTargetGroup
          Type: forward
      LoadBalancerArn: !Ref DemoProjectLoadBalancer
      Port: 8089
      Protocol: HTTP

  # ECS RESOURCES
  DemoProjectCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: AWS-ecs-fargate-cluster-cf
      Tags:
      - Key: Name
        Value: AWS-ecs-fargate-cluster-cf-tag

  DemoProjectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-loggroup
      RetentionInDays: 7

  DemoProjectTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        #- Image: "969829910614.dkr.ecr.us-east-2.amazonaws.com/nuance/demoproject-service:latest"
        - Image: !Sub 
            - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}:latest
            - RepoName: !Ref ECRRepoName   
          Name: demoproject
          PortMappings:
            - ContainerPort: 8089
              Protocol: HTTP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:  !Ref DemoProjectLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix:  'database-con'
      Cpu: "512"
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole
      Family: DemoProjectTaskDefinition-2
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: AWS-ecs-fargate-task-definition-cf-tag

  DemoProjectService:
    DependsOn: DemoProjectLBListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref DemoProjectCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 10
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: demoproject
          ContainerPort: 8089
          TargetGroupArn: !Ref DemoProjectTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref POCContainerSecurityGroup
          Subnets: !Ref DemoProjectSubnet1 
      SchedulingStrategy: REPLICA
      ServiceName: AWS-ecs-fargate-service-cf
      Tags:
        - Key: Name
          Value: AWS-ecs-fargate-service-cf-tag
      TaskDefinition: !Ref DemoProjectTaskDefinition
            
       
  POCContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref DemoProjectVPC
      GroupDescription: for ecs containers
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "8089"
          IpProtocol: -1
          ToPort: "3000"
        - FromPort: "3000"
          IpProtocol: -1
          ToPort: "27017"
        - FromPort: "27017"
          IpProtocol: -1
          ToPort: "8083"
        - FromPort: "8083"
          IpProtocol: -1
          
  POCLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: !Ref DemoProjectVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          
  DemoProjectS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${AWS::StackName}-bucket
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl
    
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
    
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
    
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildServiceRole # dependson is useful 
    Properties: 
      Name: !Sub ${AWS::StackName}-buildproject      
      Source: 
        Type: CODEPIPELINE      
      Artifacts: 
        Type: CODEPIPELINE 
      Description: "Build project according to buildspec.yml"
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        # environment variables excluded
        Image: "aws/codebuild/standard:2.0" # same as first pipeline
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_TAG
            Value: Latest
          - Name: IMAGE_REPO_NAME
            Value: !Ref ECRRepoName      

      ServiceRole: !Ref CodeBuildServiceRole

  DemoProejectPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: ${AWS::StackName}-pipeline
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Type: S3
        Location: !Ref DemoProjectS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: ${AWS::StackName}-sourceartif
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuth
                PollForSourceChanges: false
              RunOrder: 1            
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                Name: ${AWS::StackName}-sourceartif
              OutputArtifacts:
                Name: ${AWS::StackName}-buildartif
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: 
              RunOrder: 1                               
        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
                - Name: ${AWS::StackName}-buildartif
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplicationName 
                DeploymentGroupName: !Ref DemoProjectDeploymentGroup 
              RunOrder: 1 
   