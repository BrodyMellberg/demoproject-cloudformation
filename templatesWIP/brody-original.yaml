# CHANGES
# - ContainerDefinition image location
# - task execution role arn 
# - 
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  # SERVICE PARAMETERS
  mysubnet1:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Please select 1st private subnet for your Service
  myVPC:
    Type: AWS::EC2::VPC::Id
    Description: Please select the vpc for your TargetGroup
  
  # CUSTOM PARAMETERS (Brody)
  

Resources:
  myLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /opc/v1/ping
      HealthCheckPort: 8089
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: myLoadBalancerTargetGroup
      Port: 8089
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: myLoadBalancerTargetGroup-tag
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !Ref myVPC

  myloadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: myload-balancer
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref POCContainerSecurityGroup
      Subnets: !Ref mysubnet1
      Tags:
        - Key: Name
          Value: myloadbalancer-tag
      Type: application

  myLoadBalancerListener:
    DependsOn: myloadbalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref myLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref myloadbalancer
      Port: 8089
      Protocol: HTTP

  # ECS RESOURCES
  myCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: AWS-ecs-fargate-cluster-cf
      Tags:
      - Key: Name
        Value: AWS-ecs-fargate-cluster-cf-tag

  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: myLogGroup
      RetentionInDays: 7

  myTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        #- Image: "969829910614.dkr.ecr.us-east-2.amazonaws.com/nuance/demoproject-service:latest"
        - Image: 343850139185.dkr.ecr.us-east-2.amazonaws.com/demoproject:latest
# hard coded ID please change
          Name: demoproject
          # Environment:
            # - Name: POSTGRES_PASSWORD
              # Value: docker
          PortMappings:
            - ContainerPort: 8089
              Protocol: HTTP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:  !Ref myLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix:  'database-con'
      Cpu: "512"
      ExecutionRoleArn: arn:aws:iam::343850139185:role/ecsTaskExecutionRole
      Family: myTaskDefinition-2
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: AWS-ecs-fargate-task-definition-cf-tag

  myService:
    DependsOn: myLoadBalancerListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref myCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 10
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: demoproject
          ContainerPort: 8089
          TargetGroupArn: !Ref myLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref POCContainerSecurityGroup
          Subnets: !Ref mysubnet1 
      SchedulingStrategy: REPLICA
      ServiceName: AWS-ecs-fargate-service-cf
      Tags:
        - Key: Name
          Value: AWS-ecs-fargate-service-cf-tag
      TaskDefinition: !Ref myTaskDefinition
            
       
  POCContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: for ecs containers
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: "8089"
          IpProtocol: -1
          ToPort: "3000"
        - FromPort: "3000"
          IpProtocol: -1
          ToPort: "27017"
        - FromPort: "27017"
          IpProtocol: -1
          ToPort: "8083"
        - FromPort: "8083"
          IpProtocol: -1
          
  POCLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1